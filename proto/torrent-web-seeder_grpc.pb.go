// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/torrent-web-seeder.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TorrentWebSeeder_Stat_FullMethodName       = "/TorrentWebSeeder/Stat"
	TorrentWebSeeder_StatStream_FullMethodName = "/TorrentWebSeeder/StatStream"
	TorrentWebSeeder_Files_FullMethodName      = "/TorrentWebSeeder/Files"
)

// TorrentWebSeederClient is the client API for TorrentWebSeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentWebSeederClient interface {
	// Get file stat
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// Get file stat stream
	StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatReply], error)
	// Get file list
	Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error)
}

type torrentWebSeederClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentWebSeederClient(cc grpc.ClientConnInterface) TorrentWebSeederClient {
	return &torrentWebSeederClient{cc}
}

func (c *torrentWebSeederClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatReply)
	err := c.cc.Invoke(ctx, TorrentWebSeeder_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentWebSeederClient) StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TorrentWebSeeder_ServiceDesc.Streams[0], TorrentWebSeeder_StatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StatRequest, StatReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TorrentWebSeeder_StatStreamClient = grpc.ServerStreamingClient[StatReply]

func (c *torrentWebSeederClient) Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilesReply)
	err := c.cc.Invoke(ctx, TorrentWebSeeder_Files_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentWebSeederServer is the server API for TorrentWebSeeder service.
// All implementations must embed UnimplementedTorrentWebSeederServer
// for forward compatibility.
type TorrentWebSeederServer interface {
	// Get file stat
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// Get file stat stream
	StatStream(*StatRequest, grpc.ServerStreamingServer[StatReply]) error
	// Get file list
	Files(context.Context, *FilesRequest) (*FilesReply, error)
	mustEmbedUnimplementedTorrentWebSeederServer()
}

// UnimplementedTorrentWebSeederServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTorrentWebSeederServer struct{}

func (UnimplementedTorrentWebSeederServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTorrentWebSeederServer) StatStream(*StatRequest, grpc.ServerStreamingServer[StatReply]) error {
	return status.Errorf(codes.Unimplemented, "method StatStream not implemented")
}
func (UnimplementedTorrentWebSeederServer) Files(context.Context, *FilesRequest) (*FilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Files not implemented")
}
func (UnimplementedTorrentWebSeederServer) mustEmbedUnimplementedTorrentWebSeederServer() {}
func (UnimplementedTorrentWebSeederServer) testEmbeddedByValue()                          {}

// UnsafeTorrentWebSeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentWebSeederServer will
// result in compilation errors.
type UnsafeTorrentWebSeederServer interface {
	mustEmbedUnimplementedTorrentWebSeederServer()
}

func RegisterTorrentWebSeederServer(s grpc.ServiceRegistrar, srv TorrentWebSeederServer) {
	// If the following call pancis, it indicates UnimplementedTorrentWebSeederServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TorrentWebSeeder_ServiceDesc, srv)
}

func _TorrentWebSeeder_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentWebSeeder_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentWebSeeder_StatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentWebSeederServer).StatStream(m, &grpc.GenericServerStream[StatRequest, StatReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TorrentWebSeeder_StatStreamServer = grpc.ServerStreamingServer[StatReply]

func _TorrentWebSeeder_Files_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Files(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentWebSeeder_Files_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Files(ctx, req.(*FilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentWebSeeder_ServiceDesc is the grpc.ServiceDesc for TorrentWebSeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentWebSeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TorrentWebSeeder",
	HandlerType: (*TorrentWebSeederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _TorrentWebSeeder_Stat_Handler,
		},
		{
			MethodName: "Files",
			Handler:    _TorrentWebSeeder_Files_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatStream",
			Handler:       _TorrentWebSeeder_StatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/torrent-web-seeder.proto",
}
