// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: torrent-web-seeder.proto

package torrent_web_seeder

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatReply_Status int32

const (
	StatReply_INITIALIZATION    StatReply_Status = 0
	StatReply_SEEDING           StatReply_Status = 1
	StatReply_IDLE              StatReply_Status = 2
	StatReply_TERMINATED        StatReply_Status = 3
	StatReply_WAITING_FOR_PEERS StatReply_Status = 4
	StatReply_RESTORING         StatReply_Status = 5
	StatReply_BACKINGUP         StatReply_Status = 6
)

// Enum value maps for StatReply_Status.
var (
	StatReply_Status_name = map[int32]string{
		0: "INITIALIZATION",
		1: "SEEDING",
		2: "IDLE",
		3: "TERMINATED",
		4: "WAITING_FOR_PEERS",
		5: "RESTORING",
		6: "BACKINGUP",
	}
	StatReply_Status_value = map[string]int32{
		"INITIALIZATION":    0,
		"SEEDING":           1,
		"IDLE":              2,
		"TERMINATED":        3,
		"WAITING_FOR_PEERS": 4,
		"RESTORING":         5,
		"BACKINGUP":         6,
	}
)

func (x StatReply_Status) Enum() *StatReply_Status {
	p := new(StatReply_Status)
	*p = x
	return p
}

func (x StatReply_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatReply_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_torrent_web_seeder_proto_enumTypes[0].Descriptor()
}

func (StatReply_Status) Type() protoreflect.EnumType {
	return &file_torrent_web_seeder_proto_enumTypes[0]
}

func (x StatReply_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatReply_Status.Descriptor instead.
func (StatReply_Status) EnumDescriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{1, 0}
}

type Piece_Priority int32

const (
	Piece_NONE      Piece_Priority = 0
	Piece_NORMAL    Piece_Priority = 1
	Piece_HIGH      Piece_Priority = 2
	Piece_READAHEAD Piece_Priority = 3
	Piece_NEXT      Piece_Priority = 4
	Piece_NOW       Piece_Priority = 5
)

// Enum value maps for Piece_Priority.
var (
	Piece_Priority_name = map[int32]string{
		0: "NONE",
		1: "NORMAL",
		2: "HIGH",
		3: "READAHEAD",
		4: "NEXT",
		5: "NOW",
	}
	Piece_Priority_value = map[string]int32{
		"NONE":      0,
		"NORMAL":    1,
		"HIGH":      2,
		"READAHEAD": 3,
		"NEXT":      4,
		"NOW":       5,
	}
)

func (x Piece_Priority) Enum() *Piece_Priority {
	p := new(Piece_Priority)
	*p = x
	return p
}

func (x Piece_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Piece_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_torrent_web_seeder_proto_enumTypes[1].Descriptor()
}

func (Piece_Priority) Type() protoreflect.EnumType {
	return &file_torrent_web_seeder_proto_enumTypes[1]
}

func (x Piece_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Piece_Priority.Descriptor instead.
func (Piece_Priority) EnumDescriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{2, 0}
}

// Stat request message
type StatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
}

func (x *StatRequest) Reset() {
	*x = StatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatRequest) ProtoMessage() {}

func (x *StatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatRequest.ProtoReflect.Descriptor instead.
func (*StatRequest) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{0}
}

func (x *StatRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Stat response message
type StatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Completed int64            `protobuf:"varint,2,opt,name=completed,proto3" json:"completed"`
	Peers     int32            `protobuf:"varint,3,opt,name=peers,proto3" json:"peers"`
	Status    StatReply_Status `protobuf:"varint,4,opt,name=status,proto3,enum=StatReply_Status" json:"status"`
	Pieces    []*Piece         `protobuf:"bytes,5,rep,name=pieces,proto3" json:"pieces"`
	Seeders   int32            `protobuf:"varint,6,opt,name=seeders,proto3" json:"seeders"`
	Leechers  int32            `protobuf:"varint,7,opt,name=leechers,proto3" json:"leechers"`
}

func (x *StatReply) Reset() {
	*x = StatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatReply) ProtoMessage() {}

func (x *StatReply) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatReply.ProtoReflect.Descriptor instead.
func (*StatReply) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{1}
}

func (x *StatReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatReply) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *StatReply) GetPeers() int32 {
	if x != nil {
		return x.Peers
	}
	return 0
}

func (x *StatReply) GetStatus() StatReply_Status {
	if x != nil {
		return x.Status
	}
	return StatReply_INITIALIZATION
}

func (x *StatReply) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *StatReply) GetSeeders() int32 {
	if x != nil {
		return x.Seeders
	}
	return 0
}

func (x *StatReply) GetLeechers() int32 {
	if x != nil {
		return x.Leechers
	}
	return 0
}

type Piece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position int64          `protobuf:"varint,1,opt,name=position,proto3" json:"position"`
	Complete bool           `protobuf:"varint,2,opt,name=complete,proto3" json:"complete"`
	Priority Piece_Priority `protobuf:"varint,3,opt,name=priority,proto3,enum=Piece_Priority" json:"priority"`
}

func (x *Piece) Reset() {
	*x = Piece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Piece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Piece) ProtoMessage() {}

func (x *Piece) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Piece.ProtoReflect.Descriptor instead.
func (*Piece) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{2}
}

func (x *Piece) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Piece) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *Piece) GetPriority() Piece_Priority {
	if x != nil {
		return x.Priority
	}
	return Piece_NONE
}

// Files requst message
type FilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilesRequest) Reset() {
	*x = FilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesRequest) ProtoMessage() {}

func (x *FilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesRequest.ProtoReflect.Descriptor instead.
func (*FilesRequest) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{3}
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{4}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Files reply message
type FilesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files"`
}

func (x *FilesReply) Reset() {
	*x = FilesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_web_seeder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesReply) ProtoMessage() {}

func (x *FilesReply) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_web_seeder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesReply.ProtoReflect.Descriptor instead.
func (*FilesReply) Descriptor() ([]byte, []int) {
	return file_torrent_web_seeder_proto_rawDescGZIP(), []int{5}
}

func (x *FilesReply) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_torrent_web_seeder_proto protoreflect.FileDescriptor

var file_torrent_web_seeder_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x62, 0x2d, 0x73, 0x65,
	0x65, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xd0, 0x02,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x65, 0x65, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x65, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65,
	0x65, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0x78, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x06,
	0x22, 0xba, 0x01, 0x0a, 0x05, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x4c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x41, 0x44, 0x41, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45,
	0x58, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x57, 0x10, 0x05, 0x22, 0x0e, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x32, 0x89, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x65, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_torrent_web_seeder_proto_rawDescOnce sync.Once
	file_torrent_web_seeder_proto_rawDescData = file_torrent_web_seeder_proto_rawDesc
)

func file_torrent_web_seeder_proto_rawDescGZIP() []byte {
	file_torrent_web_seeder_proto_rawDescOnce.Do(func() {
		file_torrent_web_seeder_proto_rawDescData = protoimpl.X.CompressGZIP(file_torrent_web_seeder_proto_rawDescData)
	})
	return file_torrent_web_seeder_proto_rawDescData
}

var file_torrent_web_seeder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_torrent_web_seeder_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_torrent_web_seeder_proto_goTypes = []interface{}{
	(StatReply_Status)(0), // 0: StatReply.Status
	(Piece_Priority)(0),   // 1: Piece.Priority
	(*StatRequest)(nil),   // 2: StatRequest
	(*StatReply)(nil),     // 3: StatReply
	(*Piece)(nil),         // 4: Piece
	(*FilesRequest)(nil),  // 5: FilesRequest
	(*File)(nil),          // 6: File
	(*FilesReply)(nil),    // 7: FilesReply
}
var file_torrent_web_seeder_proto_depIdxs = []int32{
	0, // 0: StatReply.status:type_name -> StatReply.Status
	4, // 1: StatReply.pieces:type_name -> Piece
	1, // 2: Piece.priority:type_name -> Piece.Priority
	6, // 3: FilesReply.files:type_name -> File
	2, // 4: TorrentWebSeeder.Stat:input_type -> StatRequest
	2, // 5: TorrentWebSeeder.StatStream:input_type -> StatRequest
	5, // 6: TorrentWebSeeder.Files:input_type -> FilesRequest
	3, // 7: TorrentWebSeeder.Stat:output_type -> StatReply
	3, // 8: TorrentWebSeeder.StatStream:output_type -> StatReply
	7, // 9: TorrentWebSeeder.Files:output_type -> FilesReply
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_torrent_web_seeder_proto_init() }
func file_torrent_web_seeder_proto_init() {
	if File_torrent_web_seeder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_torrent_web_seeder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_web_seeder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_web_seeder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Piece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_web_seeder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_web_seeder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_web_seeder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_torrent_web_seeder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_torrent_web_seeder_proto_goTypes,
		DependencyIndexes: file_torrent_web_seeder_proto_depIdxs,
		EnumInfos:         file_torrent_web_seeder_proto_enumTypes,
		MessageInfos:      file_torrent_web_seeder_proto_msgTypes,
	}.Build()
	File_torrent_web_seeder_proto = out.File
	file_torrent_web_seeder_proto_rawDesc = nil
	file_torrent_web_seeder_proto_goTypes = nil
	file_torrent_web_seeder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TorrentWebSeederClient is the client API for TorrentWebSeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TorrentWebSeederClient interface {
	// Get file stat
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// Get file stat stream
	StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (TorrentWebSeeder_StatStreamClient, error)
	// Get file list
	Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error)
}

type torrentWebSeederClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentWebSeederClient(cc grpc.ClientConnInterface) TorrentWebSeederClient {
	return &torrentWebSeederClient{cc}
}

func (c *torrentWebSeederClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/TorrentWebSeeder/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentWebSeederClient) StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (TorrentWebSeeder_StatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TorrentWebSeeder_serviceDesc.Streams[0], "/TorrentWebSeeder/StatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &torrentWebSeederStatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TorrentWebSeeder_StatStreamClient interface {
	Recv() (*StatReply, error)
	grpc.ClientStream
}

type torrentWebSeederStatStreamClient struct {
	grpc.ClientStream
}

func (x *torrentWebSeederStatStreamClient) Recv() (*StatReply, error) {
	m := new(StatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *torrentWebSeederClient) Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error) {
	out := new(FilesReply)
	err := c.cc.Invoke(ctx, "/TorrentWebSeeder/Files", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentWebSeederServer is the server API for TorrentWebSeeder service.
type TorrentWebSeederServer interface {
	// Get file stat
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// Get file stat stream
	StatStream(*StatRequest, TorrentWebSeeder_StatStreamServer) error
	// Get file list
	Files(context.Context, *FilesRequest) (*FilesReply, error)
}

// UnimplementedTorrentWebSeederServer can be embedded to have forward compatible implementations.
type UnimplementedTorrentWebSeederServer struct {
}

func (*UnimplementedTorrentWebSeederServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedTorrentWebSeederServer) StatStream(*StatRequest, TorrentWebSeeder_StatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatStream not implemented")
}
func (*UnimplementedTorrentWebSeederServer) Files(context.Context, *FilesRequest) (*FilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Files not implemented")
}

func RegisterTorrentWebSeederServer(s *grpc.Server, srv TorrentWebSeederServer) {
	s.RegisterService(&_TorrentWebSeeder_serviceDesc, srv)
}

func _TorrentWebSeeder_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentWebSeeder/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentWebSeeder_StatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentWebSeederServer).StatStream(m, &torrentWebSeederStatStreamServer{stream})
}

type TorrentWebSeeder_StatStreamServer interface {
	Send(*StatReply) error
	grpc.ServerStream
}

type torrentWebSeederStatStreamServer struct {
	grpc.ServerStream
}

func (x *torrentWebSeederStatStreamServer) Send(m *StatReply) error {
	return x.ServerStream.SendMsg(m)
}

func _TorrentWebSeeder_Files_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Files(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentWebSeeder/Files",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Files(ctx, req.(*FilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TorrentWebSeeder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TorrentWebSeeder",
	HandlerType: (*TorrentWebSeederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _TorrentWebSeeder_Stat_Handler,
		},
		{
			MethodName: "Files",
			Handler:    _TorrentWebSeeder_Files_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatStream",
			Handler:       _TorrentWebSeeder_StatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "torrent-web-seeder.proto",
}
